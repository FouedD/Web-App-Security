* Always try fuzzing for buffer overflow vulnerabilities and check if the output is written somewhere in a hidden input in the form.

* Burp intruder has a character blocks that may generate different lengths of payload strings

* When the parameter is a numeric value, try to submit this value or its negative equivalent

* When the application is intending a positive value, try to send a negative one. Also, fuzz with these values :

	- 0x7f and 0x80 (127 and 128)
	- 0xff and 0x100 (255 and 256)
	- 0x7ffff and 0x8000 (32767 and 32768)
	- 0xffff and 0x10000 (65535 and 65536)
	- 0x7fffffff and 0x80000000 (2147483647 and 2147483648)
	- 0xffffffff and 0x0 (4294967295 and 0)

Send little-endian and big-endian (example 0x7fff and 0xff7f) when working with hexadecimal values.

* Fuzz for format string vulnerabilities using these payloads:
	- %n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n   //sometimes this shows no result, but the second one dereferences 
	- %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s   // each parameter on the stack and results in access violation
	- %1!n!%2!n!%3!n!%4!n!%5!n!%6!n!%7!n!%8!n!%9!n!%10!n! 
	- %1!s!%2!s!%3!s!%4!s!%5!s!%6!s!%7!s!%8!s!%9!s!%10!s!

Remember to URL-encode % , which gives %25 and check the results as in the buffer overflow case
